//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift OTel open source project
//
// Copyright (c) 2025 the Swift OTel project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// DO NOT EDIT. This file is generated automatically. See README for details.

extension OTelAttribute {
    #if Experimental
    /// `vcs` namespace
    public enum vcs {
        /// `vcs.change` namespace
        public enum change {
            /// `vcs.change.id`: The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.
            ///
            /// - Stability: development
            /// - Type: string
            /// - Example: `123`
            public static let id = "vcs.change.id"

            /// `vcs.change.state`: The state of the change (pull request/merge request/changelist).
            ///
            /// - Stability: development
            /// - Type: enum
            ///     - `open`: Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
            ///     - `wip`: WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
            ///     - `closed`: Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
            ///     - `merged`: Merged indicates that the change has been successfully integrated into the target codebase.
            /// - Examples:
            ///     - `open`
            ///     - `closed`
            ///     - `merged`
            public static let state = "vcs.change.state"

            /// `vcs.change.title`: The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.
            ///
            /// - Stability: development
            /// - Type: string
            /// - Examples:
            ///     - `Fixes broken thing`
            ///     - `feat: add my new feature`
            ///     - `[chore] update dependency`
            public static let title = "vcs.change.title"
        }

        /// `vcs.line_change` namespace
        public enum lineChange {
            /// `vcs.line_change.type`: The type of line change being measured on a branch or change.
            ///
            /// - Stability: development
            /// - Type: enum
            ///     - `added`: How many lines were added.
            ///     - `removed`: How many lines were removed.
            /// - Examples:
            ///     - `added`
            ///     - `removed`
            public static let `type` = "vcs.line_change.type"
        }

        /// `vcs.owner` namespace
        public enum owner {
            /// `vcs.owner.name`: The group owner within the version control system.
            ///
            /// - Stability: development
            /// - Type: string
            /// - Examples:
            ///     - `my-org`
            ///     - `myteam`
            ///     - `business-unit`
            public static let name = "vcs.owner.name"
        }

        /// `vcs.provider` namespace
        public enum provider {
            /// `vcs.provider.name`: The name of the version control system provider.
            ///
            /// - Stability: development
            /// - Type: enum
            ///     - `github`: [GitHub](https://github.com)
            ///     - `gitlab`: [GitLab](https://gitlab.com)
            ///     - `gittea`: Deprecated, use `gitea` instead.
            ///     - `gitea`: [Gitea](https://gitea.io)
            ///     - `bitbucket`: [Bitbucket](https://bitbucket.org)
            /// - Examples:
            ///     - `github`
            ///     - `gitlab`
            ///     - `gitea`
            ///     - `bitbucket`
            public static let name = "vcs.provider.name"
        }

        /// `vcs.ref` namespace
        public enum ref {
            /// `vcs.ref.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
            ///
            /// - Stability: development
            /// - Type: enum
            ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
            ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
            /// - Examples:
            ///     - `branch`
            ///     - `tag`
            public static let `type` = "vcs.ref.type"

            /// `vcs.ref.base` namespace
            public enum base {
                /// `vcs.ref.base.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `my-feature-branch`
                ///     - `tag-1-test`
                ///
                /// `base` refers to the starting point of a change. For example, `main`
                /// would be the base reference of type branch if you've created a new
                /// reference of type branch from it and created new commits.
                public static let name = "vcs.ref.base.name"

                /// `vcs.ref.base.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                ///     - `main`
                ///     - `123`
                ///     - `HEAD`
                ///
                /// `base` refers to the starting point of a change. For example, `main`
                /// would be the base reference of type branch if you've created a new
                /// reference of type branch from it and created new commits. The
                /// revision can be a full [hash value (see
                /// glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
                /// of the recorded change to a ref within a repository pointing to a
                /// commit [commit](https://git-scm.com/docs/git-commit) object. It does
                /// not necessarily have to be a hash; it can simply define a [revision
                /// number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
                /// which is an integer that is monotonically increasing. In cases where
                /// it is identical to the `ref.base.name`, it SHOULD still be included.
                /// It is up to the implementer to decide which value to set as the
                /// revision based on the VCS system and situational context.
                public static let revision = "vcs.ref.base.revision"

                /// `vcs.ref.base.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
                ///
                /// - Stability: development
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                ///
                /// `base` refers to the starting point of a change. For example, `main`
                /// would be the base reference of type branch if you've created a new
                /// reference of type branch from it and created new commits.
                public static let `type` = "vcs.ref.base.type"
            }

            /// `vcs.ref.head` namespace
            public enum head {
                /// `vcs.ref.head.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `my-feature-branch`
                ///     - `tag-1-test`
                ///
                /// `head` refers to where you are right now; the current reference at a
                /// given time.
                public static let name = "vcs.ref.head.name"

                /// `vcs.ref.head.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                ///     - `main`
                ///     - `123`
                ///     - `HEAD`
                ///
                /// `head` refers to where you are right now; the current reference at a
                /// given time.The revision can be a full [hash value (see
                /// glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
                /// of the recorded change to a ref within a repository pointing to a
                /// commit [commit](https://git-scm.com/docs/git-commit) object. It does
                /// not necessarily have to be a hash; it can simply define a [revision
                /// number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
                /// which is an integer that is monotonically increasing. In cases where
                /// it is identical to the `ref.head.name`, it SHOULD still be included.
                /// It is up to the implementer to decide which value to set as the
                /// revision based on the VCS system and situational context.
                public static let revision = "vcs.ref.head.revision"

                /// `vcs.ref.head.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
                ///
                /// - Stability: development
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                ///
                /// `head` refers to where you are right now; the current reference at a
                /// given time.
                public static let `type` = "vcs.ref.head.type"
            }
        }

        /// `vcs.repository` namespace
        public enum repository {
            /// `vcs.repository.name`: The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
            ///
            /// - Stability: development
            /// - Type: string
            /// - Examples:
            ///     - `semantic-conventions`
            ///     - `my-cool-repo`
            ///
            /// Due to it only being the name, it can clash with forks of the same
            /// repository if collecting telemetry across multiple orgs or groups in
            /// the same backends.
            public static let name = "vcs.repository.name"

            /// `vcs.repository.change` namespace
            public enum change {
                /// `vcs.repository.change.id`: Deprecated, use `vcs.change.id` instead.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Example: `123`
                @available(*, deprecated, renamed: "OTelAttribute.vcs.change.id")
                public static let id = "vcs.repository.change.id"

                /// `vcs.repository.change.title`: Deprecated, use `vcs.change.title` instead.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `Fixes broken thing`
                ///     - `feat: add my new feature`
                ///     - `[chore] update dependency`
                @available(*, deprecated, renamed: "OTelAttribute.vcs.change.title")
                public static let title = "vcs.repository.change.title"
            }

            /// `vcs.repository.ref` namespace
            public enum ref {
                /// `vcs.repository.ref.name`: Deprecated, use `vcs.ref.head.name` instead.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `my-feature-branch`
                ///     - `tag-1-test`
                @available(*, deprecated, renamed: "OTelAttribute.vcs.ref.head.name")
                public static let name = "vcs.repository.ref.name"

                /// `vcs.repository.ref.revision`: Deprecated, use `vcs.ref.head.revision` instead.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                ///     - `main`
                ///     - `123`
                ///     - `HEAD`
                @available(*, deprecated, renamed: "OTelAttribute.vcs.ref.head.revision")
                public static let revision = "vcs.repository.ref.revision"

                /// `vcs.repository.ref.type`: Deprecated, use `vcs.ref.head.type` instead.
                ///
                /// - Stability: development
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                @available(*, deprecated, renamed: "OTelAttribute.vcs.ref.head.type")
                public static let `type` = "vcs.repository.ref.type"
            }

            /// `vcs.repository.url` namespace
            public enum url {
                /// `vcs.repository.url.full`: The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
                ///
                /// - Stability: development
                /// - Type: string
                /// - Examples:
                ///     - `https://github.com/opentelemetry/open-telemetry-collector-contrib`
                ///     - `https://gitlab.com/my-org/my-project/my-projects-project/repo`
                ///
                /// In Git Version Control Systems, the canonical URL SHOULD NOT include
                /// the `.git` extension.
                public static let full = "vcs.repository.url.full"
            }
        }

        /// `vcs.revision_delta` namespace
        public enum revisionDelta {
            /// `vcs.revision_delta.direction`: The type of revision comparison.
            ///
            /// - Stability: development
            /// - Type: enum
            ///     - `behind`: How many revisions the change is behind the target ref.
            ///     - `ahead`: How many revisions the change is ahead of the target ref.
            /// - Examples:
            ///     - `ahead`
            ///     - `behind`
            public static let direction = "vcs.revision_delta.direction"
        }
    }
    #endif
}
