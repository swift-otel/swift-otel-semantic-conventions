// DO NOT EDIT. This file is generated automatically. See README for details.

// swiftlint:disable all

import OTelConventions

extension OTelAttributes {
    /// `vcs` namespace
    public enum vcs {
    
    
        /// `vcs.change` namespace
        public enum change {
            /// `vcs.change.id`: The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system. 
            /// 
            /// - Stability: experimental
            /// 
            /// - Type: string
            /// 
            /// - Example: `123`
            public static let id = "vcs.change.id"
        
            /// `vcs.change.state`: The state of the change (pull request/merge request/changelist). 
            /// 
            /// - Stability: experimental
            /// 
            /// - Type: enum
            ///     - `open`: Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
            ///     - `wip`: WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
            ///     - `closed`: Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
            ///     - `merged`: Merged indicates that the change has been successfully integrated into the target codebase.
            /// 
            /// - Examples:
            ///     - `open`
            ///     - `closed`
            ///     - `merged`
            public static let state = "vcs.change.state"
        
            /// `vcs.change.title`: The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary. 
            /// 
            /// - Stability: experimental
            /// 
            /// - Type: string
            /// 
            /// - Examples:
            ///     - `Fixes broken thing`
            ///     - `feat: add my new feature`
            ///     - `[chore] update dependency`
            public static let title = "vcs.change.title"
        
        
        }
    
        /// `vcs.line_change` namespace
        public enum line_change {
            /// `vcs.line_change.type`: The type of line change being measured on a branch or change. 
            /// 
            /// - Stability: experimental
            /// 
            /// - Type: enum
            ///     - `added`: How many lines were added.
            ///     - `removed`: How many lines were removed.
            /// 
            /// - Examples:
            ///     - `added`
            ///     - `removed`
            public static let type = "vcs.line_change.type"
        
        
        }
    
        /// `vcs.ref` namespace
        public enum ref {
            /// `vcs.ref.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository. 
            /// 
            /// - Stability: experimental
            /// 
            /// - Type: enum
            ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
            ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
            /// 
            /// - Examples:
            ///     - `branch`
            ///     - `tag`
            public static let type = "vcs.ref.type"
        
            /// `vcs.ref.base` namespace
            public enum base {
                /// `vcs.ref.base.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Examples:
                ///     - `my-feature-branch`
                ///     - `tag-1-test`
                public static let name = "vcs.ref.base.name"
            
                /// `vcs.ref.base.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// The revision can be a full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the recorded change to a ref within a repository pointing to a commit [commit](https://git-scm.com/docs/git-commit) object. It does not necessarily have to be a hash; it can simply define a [revision number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html) which is an integer that is monotonically increasing. In cases where it is identical to the `ref.base.name`, it SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the VCS system and situational context. 
                /// 
                /// - Examples:
                ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                ///     - `main`
                ///     - `123`
                ///     - `HEAD`
                public static let revision = "vcs.ref.base.revision"
            
                /// `vcs.ref.base.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                /// 
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                public static let type = "vcs.ref.base.type"
            
            
            }
        
            /// `vcs.ref.head` namespace
            public enum head {
                /// `vcs.ref.head.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Examples:
                ///     - `my-feature-branch`
                ///     - `tag-1-test`
                public static let name = "vcs.ref.head.name"
            
                /// `vcs.ref.head.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// The revision can be a full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the recorded change to a ref within a repository pointing to a commit [commit](https://git-scm.com/docs/git-commit) object. It does not necessarily have to be a hash; it can simply define a [revision number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html) which is an integer that is monotonically increasing. In cases where it is identical to the `ref.head.name`, it SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the VCS system and situational context. 
                /// 
                /// - Examples:
                ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                ///     - `main`
                ///     - `123`
                ///     - `HEAD`
                public static let revision = "vcs.ref.head.revision"
            
                /// `vcs.ref.head.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                /// 
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                public static let type = "vcs.ref.head.type"
            
            
            }
        }
    
        /// `vcs.repository` namespace
        public enum repository {
        
        
            /// `vcs.repository.change` namespace
            public enum change {
                /// `vcs.repository.change.id`: Deprecated, use `vcs.change.id` instead. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Example: `123`
                @available(*, deprecated, message: "Deprecated, use `vcs.change.id` instead.")
                public static let id = "vcs.repository.change.id"
            
                /// `vcs.repository.change.title`: Deprecated, use `vcs.change.title` instead. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Examples:
                ///     - `Fixes broken thing`
                ///     - `feat: add my new feature`
                ///     - `[chore] update dependency`
                @available(*, deprecated, message: "Deprecated, use `vcs.change.title` instead.")
                public static let title = "vcs.repository.change.title"
            
            
            }
        
            /// `vcs.repository.ref` namespace
            public enum ref {
                /// `vcs.repository.ref.name`: Deprecated, use `vcs.ref.head.name` instead. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Examples:
                ///     - `my-feature-branch`
                ///     - `tag-1-test`
                @available(*, deprecated, message: "Deprecated, use `vcs.ref.head.name` instead.")
                public static let name = "vcs.repository.ref.name"
            
                /// `vcs.repository.ref.revision`: Deprecated, use `vcs.ref.head.revision` instead. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Examples:
                ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                ///     - `main`
                ///     - `123`
                ///     - `HEAD`
                @available(*, deprecated, message: "Deprecated, use `vcs.ref.head.revision` instead.")
                public static let revision = "vcs.repository.ref.revision"
            
                /// `vcs.repository.ref.type`: Deprecated, use `vcs.ref.head.type` instead. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                /// 
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                @available(*, deprecated, message: "Deprecated, use `vcs.ref.head.type` instead.")
                public static let type = "vcs.repository.ref.type"
            
            
            }
        
            /// `vcs.repository.url` namespace
            public enum url {
                /// `vcs.repository.url.full`: The [URL](https://wikipedia.org/wiki/URL) of the repository providing the complete address in order to locate and identify the repository. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Examples:
                ///     - `https://github.com/opentelemetry/open-telemetry-collector-contrib`
                ///     - `https://gitlab.com/my-org/my-project/my-projects-project/repo`
                public static let full = "vcs.repository.url.full"
            
            
            }
        }
    
        /// `vcs.revision_delta` namespace
        public enum revision_delta {
            /// `vcs.revision_delta.direction`: The type of revision comparison. 
            /// 
            /// - Stability: experimental
            /// 
            /// - Type: enum
            ///     - `behind`: How many revisions the change is behind the target ref.
            ///     - `ahead`: How many revisions the change is ahead of the target ref.
            /// 
            /// - Examples:
            ///     - `ahead`
            ///     - `behind`
            public static let direction = "vcs.revision_delta.direction"
        
        
        }
    }
}