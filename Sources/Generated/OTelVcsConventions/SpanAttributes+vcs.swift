// DO NOT EDIT. This file is generated automatically. See README for details.

// swiftlint:disable all

import OTelConventions
import Tracing

extension SpanAttributes {
    /// `vcs` namespace
    public var vcs: VcsAttributes {
        get {
            .init(attributes: self)
        }
        set {
            self = newValue.attributes
        }
    }
    
    @dynamicMemberLookup
    public struct VcsAttributes: SpanAttributeNamespace {
        public var attributes: SpanAttributes
    
        public init(attributes: SpanAttributes) {
            self.attributes = attributes
        }
    
        public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
            public init() {}
    
        }
    
        /// `vcs.change` namespace
        public var change: ChangeAttributes {
            get {
                .init(attributes: self.attributes)
            }
            set {
                self.attributes = newValue.attributes
            }
        }
        
        @dynamicMemberLookup
        public struct ChangeAttributes: SpanAttributeNamespace {
            public var attributes: SpanAttributes
        
            public init(attributes: SpanAttributes) {
                self.attributes = attributes
            }
        
            public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                public init() {}
                /// `vcs.change.id`: The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Example: `123`
                public var id: Self.Key<String> { .init(name: OTelConventions.vcs.change.id) }
        
                /// `vcs.change.state`: The state of the change (pull request/merge request/changelist). 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: enum
                ///     - `open`: Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
                ///     - `wip`: WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
                ///     - `closed`: Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
                ///     - `merged`: Merged indicates that the change has been successfully integrated into the target codebase.
                /// 
                /// - Examples:
                ///     - `open`
                ///     - `closed`
                ///     - `merged`
                public var state: Self.Key<StateEnum> { .init(name: OTelConventions.vcs.change.state) }
                
                public enum StateEnum: String, SpanAttributeConvertible {
                    /// `open`: Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.
                    case `open` = "open"
                    /// `wip`: WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.
                    case wip = "wip"
                    /// `closed`: Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.
                    case closed = "closed"
                    /// `merged`: Merged indicates that the change has been successfully integrated into the target codebase.
                    case merged = "merged"
                    public func toSpanAttribute() -> Tracing.SpanAttribute {
                        return .string(self.rawValue)
                    }
                }
        
                /// `vcs.change.title`: The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: string
                /// 
                /// - Examples:
                ///     - `Fixes broken thing`
                ///     - `feat: add my new feature`
                ///     - `[chore] update dependency`
                public var title: Self.Key<String> { .init(name: OTelConventions.vcs.change.title) }
            }
        
        
        }
    
        /// `vcs.line_change` namespace
        public var line_change: LineChangeAttributes {
            get {
                .init(attributes: self.attributes)
            }
            set {
                self.attributes = newValue.attributes
            }
        }
        
        @dynamicMemberLookup
        public struct LineChangeAttributes: SpanAttributeNamespace {
            public var attributes: SpanAttributes
        
            public init(attributes: SpanAttributes) {
                self.attributes = attributes
            }
        
            public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                public init() {}
                /// `vcs.line_change.type`: The type of line change being measured on a branch or change. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: enum
                ///     - `added`: How many lines were added.
                ///     - `removed`: How many lines were removed.
                /// 
                /// - Examples:
                ///     - `added`
                ///     - `removed`
                public var type: Self.Key<TypeEnum> { .init(name: OTelConventions.vcs.line_change.type) }
                
                public enum TypeEnum: String, SpanAttributeConvertible {
                    /// `added`: How many lines were added.
                    case added = "added"
                    /// `removed`: How many lines were removed.
                    case removed = "removed"
                    public func toSpanAttribute() -> Tracing.SpanAttribute {
                        return .string(self.rawValue)
                    }
                }
            }
        
        
        }
    
        /// `vcs.ref` namespace
        public var ref: RefAttributes {
            get {
                .init(attributes: self.attributes)
            }
            set {
                self.attributes = newValue.attributes
            }
        }
        
        @dynamicMemberLookup
        public struct RefAttributes: SpanAttributeNamespace {
            public var attributes: SpanAttributes
        
            public init(attributes: SpanAttributes) {
                self.attributes = attributes
            }
        
            public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                public init() {}
                /// `vcs.ref.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                /// 
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                public var type: Self.Key<TypeEnum> { .init(name: OTelConventions.vcs.ref.type) }
                
                public enum TypeEnum: String, SpanAttributeConvertible {
                    /// `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                    case branch = "branch"
                    /// `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                    case tag = "tag"
                    public func toSpanAttribute() -> Tracing.SpanAttribute {
                        return .string(self.rawValue)
                    }
                }
            }
        
            /// `vcs.ref.base` namespace
            public var base: BaseAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct BaseAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.ref.base.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `my-feature-branch`
                    ///     - `tag-1-test`
                    public var name: Self.Key<String> { .init(name: OTelConventions.vcs.ref.base.name) }
            
                    /// `vcs.ref.base.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// The revision can be a full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the recorded change to a ref within a repository pointing to a commit [commit](https://git-scm.com/docs/git-commit) object. It does not necessarily have to be a hash; it can simply define a [revision number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html) which is an integer that is monotonically increasing. In cases where it is identical to the `ref.base.name`, it SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the VCS system and situational context. 
                    /// 
                    /// - Examples:
                    ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                    ///     - `main`
                    ///     - `123`
                    ///     - `HEAD`
                    public var revision: Self.Key<String> { .init(name: OTelConventions.vcs.ref.base.revision) }
            
                    /// `vcs.ref.base.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: enum
                    ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                    ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                    /// 
                    /// - Examples:
                    ///     - `branch`
                    ///     - `tag`
                    public var type: Self.Key<TypeEnum> { .init(name: OTelConventions.vcs.ref.base.type) }
                    
                    public enum TypeEnum: String, SpanAttributeConvertible {
                        /// `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                        case branch = "branch"
                        /// `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                        case tag = "tag"
                        public func toSpanAttribute() -> Tracing.SpanAttribute {
                            return .string(self.rawValue)
                        }
                    }
                }
            
            
            }
        
            /// `vcs.ref.head` namespace
            public var head: HeadAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct HeadAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.ref.head.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `my-feature-branch`
                    ///     - `tag-1-test`
                    public var name: Self.Key<String> { .init(name: OTelConventions.vcs.ref.head.name) }
            
                    /// `vcs.ref.head.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// The revision can be a full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the recorded change to a ref within a repository pointing to a commit [commit](https://git-scm.com/docs/git-commit) object. It does not necessarily have to be a hash; it can simply define a [revision number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html) which is an integer that is monotonically increasing. In cases where it is identical to the `ref.head.name`, it SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the VCS system and situational context. 
                    /// 
                    /// - Examples:
                    ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                    ///     - `main`
                    ///     - `123`
                    ///     - `HEAD`
                    public var revision: Self.Key<String> { .init(name: OTelConventions.vcs.ref.head.revision) }
            
                    /// `vcs.ref.head.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: enum
                    ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                    ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                    /// 
                    /// - Examples:
                    ///     - `branch`
                    ///     - `tag`
                    public var type: Self.Key<TypeEnum> { .init(name: OTelConventions.vcs.ref.head.type) }
                    
                    public enum TypeEnum: String, SpanAttributeConvertible {
                        /// `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                        case branch = "branch"
                        /// `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                        case tag = "tag"
                        public func toSpanAttribute() -> Tracing.SpanAttribute {
                            return .string(self.rawValue)
                        }
                    }
                }
            
            
            }
        }
    
        /// `vcs.repository` namespace
        public var repository: RepositoryAttributes {
            get {
                .init(attributes: self.attributes)
            }
            set {
                self.attributes = newValue.attributes
            }
        }
        
        @dynamicMemberLookup
        public struct RepositoryAttributes: SpanAttributeNamespace {
            public var attributes: SpanAttributes
        
            public init(attributes: SpanAttributes) {
                self.attributes = attributes
            }
        
            public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                public init() {}
        
            }
        
            /// `vcs.repository.change` namespace
            public var change: ChangeAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct ChangeAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.repository.change.id`: Deprecated, use `vcs.change.id` instead. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Example: `123`
                    @available(*, deprecated, message: "Deprecated, use `vcs.change.id` instead.")
                    public var id: Self.Key<String> { .init(name: OTelConventions.vcs.repository.change.id) }
            
                    /// `vcs.repository.change.title`: Deprecated, use `vcs.change.title` instead. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `Fixes broken thing`
                    ///     - `feat: add my new feature`
                    ///     - `[chore] update dependency`
                    @available(*, deprecated, message: "Deprecated, use `vcs.change.title` instead.")
                    public var title: Self.Key<String> { .init(name: OTelConventions.vcs.repository.change.title) }
                }
            
            
            }
        
            /// `vcs.repository.ref` namespace
            public var ref: RefAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct RefAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.repository.ref.name`: Deprecated, use `vcs.ref.head.name` instead. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `my-feature-branch`
                    ///     - `tag-1-test`
                    @available(*, deprecated, message: "Deprecated, use `vcs.ref.head.name` instead.")
                    public var name: Self.Key<String> { .init(name: OTelConventions.vcs.repository.ref.name) }
            
                    /// `vcs.repository.ref.revision`: Deprecated, use `vcs.ref.head.revision` instead. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                    ///     - `main`
                    ///     - `123`
                    ///     - `HEAD`
                    @available(*, deprecated, message: "Deprecated, use `vcs.ref.head.revision` instead.")
                    public var revision: Self.Key<String> { .init(name: OTelConventions.vcs.repository.ref.revision) }
            
                    /// `vcs.repository.ref.type`: Deprecated, use `vcs.ref.head.type` instead. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: enum
                    ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                    ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                    /// 
                    /// - Examples:
                    ///     - `branch`
                    ///     - `tag`
                    @available(*, deprecated, message: "Deprecated, use `vcs.ref.head.type` instead.")
                    public var type: Self.Key<TypeEnum> { .init(name: OTelConventions.vcs.repository.ref.type) }
                    
                    public enum TypeEnum: String, SpanAttributeConvertible {
                        /// `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                        case branch = "branch"
                        /// `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                        case tag = "tag"
                        public func toSpanAttribute() -> Tracing.SpanAttribute {
                            return .string(self.rawValue)
                        }
                    }
                }
            
            
            }
        
            /// `vcs.repository.url` namespace
            public var url: UrlAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct UrlAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.repository.url.full`: The [URL](https://wikipedia.org/wiki/URL) of the repository providing the complete address in order to locate and identify the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `https://github.com/opentelemetry/open-telemetry-collector-contrib`
                    ///     - `https://gitlab.com/my-org/my-project/my-projects-project/repo`
                    public var full: Self.Key<String> { .init(name: OTelConventions.vcs.repository.url.full) }
                }
            
            
            }
        }
    
        /// `vcs.revision_delta` namespace
        public var revision_delta: RevisionDeltaAttributes {
            get {
                .init(attributes: self.attributes)
            }
            set {
                self.attributes = newValue.attributes
            }
        }
        
        @dynamicMemberLookup
        public struct RevisionDeltaAttributes: SpanAttributeNamespace {
            public var attributes: SpanAttributes
        
            public init(attributes: SpanAttributes) {
                self.attributes = attributes
            }
        
            public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                public init() {}
                /// `vcs.revision_delta.direction`: The type of revision comparison. 
                /// 
                /// - Stability: experimental
                /// 
                /// - Type: enum
                ///     - `behind`: How many revisions the change is behind the target ref.
                ///     - `ahead`: How many revisions the change is ahead of the target ref.
                /// 
                /// - Examples:
                ///     - `ahead`
                ///     - `behind`
                public var direction: Self.Key<DirectionEnum> { .init(name: OTelConventions.vcs.revision_delta.direction) }
                
                public enum DirectionEnum: String, SpanAttributeConvertible {
                    /// `behind`: How many revisions the change is behind the target ref.
                    case behind = "behind"
                    /// `ahead`: How many revisions the change is ahead of the target ref.
                    case ahead = "ahead"
                    public func toSpanAttribute() -> Tracing.SpanAttribute {
                        return .string(self.rawValue)
                    }
                }
            }
        
        
        }
    }
}